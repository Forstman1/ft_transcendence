// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id @unique @default(uuid())
  username          String       @unique
  email             String       @unique
  fullname          String       
  avatarURL         String            @default("https://iintra.freekb.es/imgs/user.png")
  coalitionURL      String            @default("https://profile.intra.42.fr/assets/coalitions/factionless-05b8cd65bda8f5eaf56ecf1d16493f41908801cfd66aa97fb27c9611064f4f36.svg")
  coalitionColor    String            @default("#292d")
  coalitionName     String            @default("Factionless")
  twoFactorEnabled  Boolean           @default(false)
  twoFactorSecret   String?
  isOnline          Boolean     @default(false)
  isInGame          Boolean     @default(false)
  hasTwoFA          Boolean     @default(false)
  // isBlocked         Boolean     @default(false)
  // isMuted           Boolean     @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  friends User[] @relation("Friends")
  friendOf User[] @relation("Friends")

  blocked User[] @relation("Blocked")
  blockedBy User[] @relation("Blocked")

  chatWith User[] @relation("Chat")
  chatBy User[] @relation("Chat")

  friendRequestsSent FriendRequest[] @relation("SentFriendRequests")
  friendRequestsReceived FriendRequest[] @relation("ReceivedFriendRequests")

  channelMember ChannelMember[]
  banedFrom Channel[] @relation("BannedUsers")
  
  roomMember      DMRoom[] @relation("rooms")
  roomMessage     UserMessage[]    @relation("roommessage")

  games     GameHistory[]
  userGamesXp   Int      @default(0)
  notifications   Notification[]

}


model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  senderId  String?
  type      NotifType
  title      String
  description   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model FriendRequest {
  id        String   @id @default(uuid())
  fromUser  User     @relation("SentFriendRequests", fields: [fromUserId], references: [id])
  fromUserId String
  toUser    User     @relation("ReceivedFriendRequests", fields: [toUserId], references: [id])
  toUserId   String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Channel {
  id       String   @id @default(uuid())
  name     String @unique
  type     Type @default(PUBLIC)
  channelmessages ChannelMessage[]
  bannedUsers User[] @relation("BannedUsers")
  password  String?
  channelMember ChannelMember[]
}




model DMRoom {
  id        String   @id @default(uuid())
  roomMembers User[]    @relation("rooms")
  roomMessages UserMessage[]
}




model ChannelMember {
  id        String   @id @default(uuid())
  channelId String
  userId    String
  role     Role @default(MEMBER)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade) 
  channelmessages ChannelMessage[] @relation("channelmessage")
  isMuted           Boolean     @default(false)
  timeMuted DateTime?
  createdAt DateTime @default(now())
}

model ChannelMessage {
  id        String   @id @default(uuid())
  content   String
  author ChannelMember @relation(name: "channelmessage", fields: [authorID], references: [id], onDelete: Cascade)
	reciver Channel @relation(fields: [reciverID], references: [id], onDelete: Cascade)
	reciverID String
	authorID String
  authorName String
  createdAt DateTime @default(now())
}

model UserMessage {
  id        String   @id @default(uuid())
  content   String
  author User @relation(name: "roommessage", fields: [authorID], references: [id], onDelete: Cascade)
	reciver DMRoom @relation(fields: [reciverID], references: [id], onDelete: Cascade)
	reciverID String
	authorID String
  authorName String
  createdAt DateTime @default(now())
}
model GameHistory {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  opponentId String
  status    String
  userScore Int
  opponentScore Int
  rounds    Int
  matches   Int
  xp        Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  OWNER
  MEMBER
}

enum Type {
  PUBLIC
  PRIVATE
  PROTECTED
}

enum NotifType {
  gameInvite
  friendRequest
  roomMessage
}