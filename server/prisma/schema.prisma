// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id @default(uuid())
  username          String       @unique
  email             String       @unique
  fullname          String       
  coalitionUrl      String?
  avatarURL         String            @default("https://iintra.freekb.es/imgs/user.png")
  coalitionURL      String            @default("https://profile.intra.42.fr/assets/coalitions/factionless-05b8cd65bda8f5eaf56ecf1d16493f41908801cfd66aa97fb27c9611064f4f36.svg")
  coalitionColor    String            @default("#292d39")
  twoFactorEnabled  Boolean           @default(false)
  twoFactorSecret   String?
  isOnline          Boolean     @default(false)
  hasTwoFA          Boolean     @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  usersmessages1 UserMessage[] @relation("Author")
  usersmessages2 UserMessage[] @relation("Reciver")

  channelmessages ChannelMessage[]

  channelMember ChannelMember[]
  games     GameHistory[]

  friends  User[] @relation("friends")
  friendOf User[] @relation("friends")

}

model Channel {
  id       String   @id @default(uuid())
  name     String @unique
  type     Type @default(PUBLIC)
  channelmessages ChannelMessage[]
  password  String?
  channelMember ChannelMember[]
}

model ChannelMember {
  id        String   @id @default(uuid())
  channelId String
  userId    String
  role     Role @default(MEMBER)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade) 
  createdAt DateTime @default(now())
}

model ChannelMessage {
  id        String   @id @default(uuid())
  content   String
  author User @relation(fields: [authorID], references: [id], onDelete: Cascade)
	reciver Channel @relation(fields: [reciverID], references: [id], onDelete: Cascade)
	reciverID String
	authorID String
  authorName String
  createdAt DateTime @default(now())
}
model UserMessage {
  id        String   @id @default(uuid())
  content   String
  author User @relation(name: "Author", fields: [authorID], references: [id])
	reciver User @relation(name: "Reciver", fields: [reciverID], references: [id])
	reciverID String
	authorID String
  authorName String
  createdAt DateTime @default(now())
}


model GameHistory {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  opponentId String
  status    String
  userScore Int
  opponentScore Int
  rounds    Int
  matches   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  OWNER
  MEMBER
}

enum Type {
  PUBLIC
  PRIVATE
  PROTECTED
}