// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}




model User {
  id                String       @id @default(uuid())
  username          String       @unique
  email             String       @unique
  fullname          String       
  avatar            String?
  coalitionUrl      String?
  coalitionColor    String?
  accessToken       String
  refreshToken      String
  isOnline          Boolean     @default(false)
  hasTwoFA          Boolean     @default(false)
  // isBlocked          Boolean     @default(false)
  // isMuted           Boolean     @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  friends User[] @relation("Friends")
  friendOf User[] @relation("Friends")

  chatWith User[] @relation("Chate")
  chatBy User[] @relation("Chate")

  friendRequestsSent FriendRequest[] @relation("SentFriendRequests")
  friendRequestsReceived FriendRequest[] @relation("ReceivedFriendRequests")

  channelMember ChannelMember[]
  
  roomMember      DMRoom[] @relation("rooms")
  roomMessage     UserMessage[]    @relation("roommessage")

  games     GameHistory[]

}


model FriendRequest {
  id        String   @id @default(uuid())
  fromUser  User     @relation("SentFriendRequests", fields: [fromUserId], references: [id])
  fromUserId String
  toUser    User     @relation("ReceivedFriendRequests", fields: [toUserId], references: [id])
  toUserId   String
  status    String   // You can use this to track the status of the request (e.g., "pending," "accepted," "rejected")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt



}

model Channel {
  id       String   @id @default(uuid())
  name     String @unique
  type     Type @default(PUBLIC)
  channelmessages ChannelMessage[]
  password  String?
  channelMember ChannelMember[]
}




model DMRoom {
  id        String   @id @default(uuid())
  roomMembers User[]    @relation("rooms")
  roomMessages UserMessage[]
}




model ChannelMember {
  id        String   @id @default(uuid())
  channelId String
  userId    String
  role     Role @default(MEMBER)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade) 
  channelmessages ChannelMessage[] @relation("channelmessage")

  createdAt DateTime @default(now())
}

model ChannelMessage {
  id        String   @id @default(uuid())
  content   String
  author ChannelMember @relation(name: "channelmessage", fields: [authorID], references: [id], onDelete: Cascade)
	reciver Channel @relation(fields: [reciverID], references: [id], onDelete: Cascade)
	reciverID String
	authorID String
  authorName String
  createdAt DateTime @default(now())
}

model UserMessage {
  id        String   @id @default(uuid())
  content   String
  author User @relation(name: "roommessage", fields: [authorID], references: [id], onDelete: Cascade)
	reciver DMRoom @relation(fields: [reciverID], references: [id], onDelete: Cascade)
	reciverID String
	authorID String
  authorName String
  createdAt DateTime @default(now())
}



model GameHistory {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  opponentId String
  status    String
  userScore Int
  opponentScore Int
  rounds    Int
  matches   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  OWNER
  MEMBER
}

enum Type {
  PUBLIC
  PRIVATE
  PROTECTED
}